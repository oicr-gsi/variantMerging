## Commands
This section lists command(s) run by variantMerging workflow

### Preprocessing

Detect NORMAL/TUMOR swap, impute missing fields (i.e. in case of such callers as strelka) 

```
 python3 PREPROCESSING_SCRIPT VCF_FILE -o VCF_FILE_BASENAME_tmp.vcf -r REFERENCE_ID
 
 bgzip -c VCF_FILE_BASENAME_tmp.vcf > VCF_FILE_BASENAME_tmp.vcf.gz
 gatk SortVcf -I VCF_FILE_BASENAME_tmp.vcf.gz 
              -R REF_FASTA 
              -O VCF_FILE_BASENAME_processed.vcf.gz
```

### Merging vcf files
 
This is a simple concatenation of input vcfs, there may be duplicate entries for the same call if multiple callers discover the same variant.
 
```
 gatk MergeVcfs -I INPUT_VCFS -O PREFIX_mergedVcfs.vcf.gz
 
```
 
### Combining vcf files
 
A more complex merging: matching fields will be annotated by caller.
 
```

  set -euxo pipefail 
  python3 <<CODE
  import sys
  v = "~{sep=' ' inputVcfs}"
  vcfFiles = v.split()
  with open("vcf_list", 'w') as l:
      for v in vcfFiles:
          l.write(v + "\n")
  CODE

  python3 COMBINING_SCRIPT vcf_list -c OUTPUT_PREFIX_tmp.vcf -n ~{sep=',' inputNames}
  gatk SortVcf -I OUTPUT_PREFIX_tmp.vcf -R REFERENCE_FASTA -O OUTPUT_PREFIX_combined.vcf.gz

```
### Postprocessing (Name injection)

The same script used for preprocessing injects names of samples into the header if argumants are passed

```
 set -euxo pipefail
 python3 ~{postprocessScript} ~{vcfFile} -o ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf -r ~{referenceId} -t ~{tumorName} ~{"-n " + normalName}
 bgzip -c ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf > ~{basename(vcfFile, '.vcf.gz')}.vcf.gz
 tabix -p vcf ~{basename(vcfFile, '.vcf.gz')}.vcf.gz

```
