## Commands
This section lists command(s) run by variantMerging workflow

* Running variantMerging

### Preprocessing

A vetting script makes sure we have matching formats used across vcf, in addition making separate vcf files with only PASS calls

```
 set -euxo pipefail
 python3 ~{preprocessScript} ~{vcfFile} -o ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf -r ~{referenceId} 
 bgzip -c ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf > ~{basename(vcfFile, '.vcf.gz')}_processed.vcf.gz
 bcftools view -f "PASS" ~{basename(vcfFile, '.vcf.gz')}_processed.vcf.gz | bgzip -c > ~{basename(vcfFile, '.vcf.gz')}_processed_pass.vcf.gz
```

### reorder inputs according to priority

```
 python3 <<CODE
 import re
 sorted_indices = []
 unsortedNames = re.split(",",  "~{sep=',' unsortedWorkflows}")
 priorities = re.split(",", "~{sep=',' priorities}")
 unsortedFiles = re.split(",", "~{sep=',' unsortedVcfs}")
 unsortedPassFiles = re.split(",", "~{sep=',' unsortedPassVcfs}")
 sorted_indices = []
 for p in  priorities:
     if p in unsortedNames:
         print(p + "\n")
         sorted_indices.append(unsortedNames.index(p))

 print(sorted_indices)
 with open("~{sortedFiles}", mode='w') as out:
    out.writelines([unsortedFiles[i] + "\n" for i in sorted_indices])
 with open("~{sortedPassFiles}", mode='w') as out2:
    out2.writelines([unsortedPassFiles[j] + "\n" for j in sorted_indices])
 with open("~{sortedWorkflows}", mode='w') as out3:
    out3.writelines([unsortedNames[k] + "\n" for k in sorted_indices])
 CODE
```

### Merge variants with GATK (picard)

```
 gatk MergeVcfs -I ~{sep=" -I " inputVcfs} -O ~{outputPrefix}_mergedVcfs.vcf.gz
```

### Customized combining of the variants

This step is custom-scripted and the produced vcf has variants annotated in a very detailed way

```
  set -euxo pipefail 
  python3 <<CODE
  import sys
  v = "~{sep=' ' inputVcfs}"
  vcfFiles = v.split()
  with open("vcf_list", 'w') as l:
      for v in vcfFiles:
          l.write(v + "\n")
  CODE

  python3 ~{combiningScript} vcf_list -c ~{outputPrefix}_tmp.vcf -n ~{sep=',' inputNames} 
  gatk SortVcf -I ~{outputPrefix}_tmp.vcf -R ~{referenceFasta} -O ~{outputPrefix}_combined.vcf.gz
```

### Ensemble variants with bcbio tools

```
  ~{ensembleProgram} ensemble ~{outputPrefix}_ensembled.vcf.gz ~{referenceFasta} --names ~{sep=',' inputNames} --numpass ~{minCallers} ~{additionalParameters} ~{sep=' ' inputVcfs}
```

### Post-processing

```
 set -euxo pipefail
 python3 ~{postprocessScript} ~{vcfFile} -o ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf -r ~{referenceId} -t ~{tumorName} ~{"-n " + normalName}
 bgzip -c ~{basename(vcfFile, '.vcf.gz')}_tmp.vcf > ~{basename(vcfFile, '.vcf.gz')}.vcf.gz
 tabix -p vcf ~{basename(vcfFile, '.vcf.gz')}.vcf.gz
```
